// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Auth.js required models
model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        BigInt?
  token_type        String?
  scope             String?   @db.Text
  id_token          String?   @db.Text
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?   @db.Text
  role             UserRole  @default(USER)
  phone            String?
  mobile           String?
  extension        String?
  aadObjectId      String?   @unique
  tenantId         String?
  jobTitle         String?
  officeLocation   String?
  departmentExport Json?     // Raw data from Graph
  isFromTenantSync Boolean   @default(false)  // Track if synced from Microsoft Graph
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  emails          Email[]
  managedDepartments Department[] @relation("DepartmentManager")
  userDepartments UserDepartment[]
  userPositions   UserPosition[]

  @@index([isFromTenantSync])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Email {
  id            String    @id @default(cuid())
  messageId     String    @unique
  subject       String
  sender        String
  recipient     String
  body          String?   @db.Text
  htmlBody      String?   @db.Text
  receivedAt    DateTime
  isRead        Boolean   @default(false)
  isImportant   Boolean   @default(false)
  isDraft       Boolean   @default(false)
  hasAttachments Boolean  @default(false)
  folder        String    @default("INBOX")
  attachments   Json?     // Store attachment metadata as JSON
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([receivedAt])
  @@index([isRead])
}

model Department {
  id          String    @id @default(cuid())
  name        String
  code        String    @unique
  description String?
  parentId    String?
  managerId   String?
  isFromTenantSync Boolean @default(false)  // Track if synced from Microsoft Graph
  tenantId    String?   // Microsoft Graph ID if synced
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent      Department?           @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[]          @relation("DepartmentHierarchy")
  manager     User?                 @relation("DepartmentManager", fields: [managerId], references: [id])
  positions   Position[]
  userDepartments UserDepartment[]
  sharePoints DepartmentSharePoint[]
  mailboxes   DepartmentMailbox[]
  groups      DepartmentGroup[]

  @@index([parentId])
  @@index([managerId])
  @@index([isFromTenantSync])
}

model Position {
  id           String    @id @default(cuid())
  name         String
  description  String?
  departmentId String
  isFromTenantSync Boolean @default(false)  // Track if synced from Microsoft Graph
  tenantId     String?   // Microsoft Graph ID if synced
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  department   Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  userPositions UserPosition[]

  @@index([departmentId])
  @@index([isFromTenantSync])
}

model UserDepartment {
  id           String   @id @default(cuid())
  userId       String
  departmentId String
  isPrimary    Boolean  @default(false)
  assignedAt   DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@index([userId])
  @@index([departmentId])
}

model UserPosition {
  id         String   @id @default(cuid())
  userId     String
  positionId String
  assignedAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@unique([userId, positionId])
  @@index([userId])
  @@index([positionId])
}

model DepartmentSharePoint {
  id           String      @id @default(cuid())
  departmentId String
  siteId       String      @unique
  siteUrl      String
  displayName  String
  accessLevel  AccessLevel @default(READ)
  isFromTenantSync Boolean @default(false)  // Track if synced from Microsoft Graph
  tenantSiteId String?     // Microsoft Graph Site ID if synced
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@index([departmentId])
  @@index([isFromTenantSync])
}

model DepartmentMailbox {
  id           String      @id @default(cuid())
  departmentId String
  mailboxId    String      @unique
  emailAddress String
  displayName  String
  accessLevel  AccessLevel @default(READ)
  isFromTenantSync Boolean @default(false)  // Track if synced from Microsoft Graph
  tenantMailboxId String?  // Microsoft Graph Mailbox ID if synced
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@index([departmentId])
  @@index([isFromTenantSync])
}

model DepartmentGroup {
  id           String      @id @default(cuid())
  departmentId String
  groupId      String      @unique
  displayName  String
  emailAddress String?
  description  String?
  groupType    GroupType   @default(SECURITY)
  isFromTenantSync Boolean @default(false)  // Track if synced from Microsoft Graph
  tenantGroupId String?    // Microsoft Graph Group ID if synced
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@index([departmentId])
  @@index([isFromTenantSync])
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum AccessLevel {
  READ
  CONTRIBUTE
  OWNER
}

enum GroupType {
  SECURITY
  DISTRIBUTION
  UNIFIED
  MICROSOFT365
}

